Resources:
  LambdaRole:
      Type: "AWS::IAM::Role"
      Properties: 
        AssumeRolePolicyDocument:
           Version: "2012-10-17"
           Statement: 
              - "Effect": "Allow"
                Principal: 
                    Service: "lambda.amazonaws.com"
                Action: "sts:AssumeRole"
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
          - arn:aws:iam::aws:policy/AmazonS3FullAccess
        Path: "/"
        RoleName: "CmsLambdaToAssumeRole"
  CmsLambda:
      Type: "AWS::Lambda::Function"
      Properties: 
        Code:
          S3Bucket: "gabriel-serverless-cms"
          S3Key: "lambda/my-cms-aws-cms-Controller.zip"
        Description: "Aws cms central management function designed to handle any API Gateway request"
        FunctionName: "CmsLambda"
        Handler: "controller.handler"
        MemorySize: 512
        Role: 
            Fn::GetAtt: 
                - "LambdaRole"
                - "Arn"
        Runtime: "python2.7"
        Timeout: 10
Outputs:
   CmsLambdaArn:
     Description: Cms Lambda Arn
     Value: !GetAtt CmsLambda.Arn
     Export:
       Name: CmsLambdaArn
   LambdaRoleName:
     Description: Cms Lambda Role
     Value: !Ref LambdaRole
     Export:
       Name: LambdaRoleName
   LambdaFunctionName:
     Description: Cms Lambda FunctionName
     Value: !Ref CmsLambda
     Export:
       Name: LambdaFunctionName
   ApiInvocationUri:
     Description: Cms Api Invocation Uri
     Value: !Sub  "'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CmsLambda.Arn}/invocations'"
     Export:
       Name: ApiInvocationUri
  ApiPermissionUri:
    Description: Cms Api Permission Uri
    Value: !Sub 
      - "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiId}/*/POST/" #TO TEST
      - {ApiId: !ImportValue ApiId}
    Export:
      Name: ApiPermissionUri